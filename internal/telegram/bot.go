package telegram

import (
	"fmt"
	"log"
	"strconv"

	"diabetbot/internal/config"
	"diabetbot/internal/models"
	"diabetbot/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
)

type Bot struct {
	api             *tgbotapi.BotAPI
	userService     *services.UserService
	glucoseService  *services.GlucoseService
	foodService     *services.FoodService
	gigachatService *services.GigaChatService
	config          *config.TelegramConfig
}

func NewBot(cfg *config.TelegramConfig, db *gorm.DB, gigachatService *services.GigaChatService) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	return &Bot{
		api:             bot,
		userService:     services.NewUserService(db),
		glucoseService:  services.NewGlucoseService(db),
		foodService:     services.NewFoodService(db),
		gigachatService: gigachatService,
		config:          cfg,
	}, nil
}

func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			go b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	user, err := b.userService.GetOrCreateUser(message.From.ID, message.From.UserName, 
		message.From.FirstName, message.From.LastName, message.From.LanguageCode)
	if err != nil {
		log.Printf("Error getting/creating user: %v", err)
		return
	}

	switch {
	case message.IsCommand():
		b.handleCommand(message, user)
	case isNumeric(message.Text):
		b.handleGlucoseInput(message, user)
	case b.isKeyboardButton(message.Text):
		b.handleKeyboardButton(message, user)
	default:
		b.handleTextMessage(message, user)
	}
}

func (b *Bot) handleCommand(message *tgbotapi.Message, user *models.User) {
	switch message.Command() {
	case "start":
		b.handleStartCommand(message, user)
	case "help":
		b.handleHelpCommand(message)
	case "glucose":
		b.handleGlucoseCommand(message)
	case "food":
		b.handleFoodCommand(message)
	case "stats":
		b.handleStatsCommand(message, user)
	case "webapp":
		b.handleWebAppCommand(message, user)
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message, user *models.User) {
	text := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç, %s! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ –ß–∏—Å–ª–æ (—É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5.6)
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã (—á—Ç–æ —Å—ä–µ–ª–∏)
‚Ä¢ –í–æ–ø—Ä–æ—Å –æ –¥–∏–∞–±–µ—Ç–µ

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üì±`, user.FirstName)

	keyboard := b.getMainKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	text := `üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üîò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
üîò –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ:
  ‚Ä¢ –ß–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.6) - –∑–∞–ø–∏—Å–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞
  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã - –∑–∞–ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
  ‚Ä¢ –í–æ–ø—Ä–æ—Å –æ –¥–∏–∞–±–µ—Ç–µ - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç –ò–ò

üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

ü§ñ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫:
–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Å–∞—Ö–∞—Ä–∞ –∏ –ø–∏—Ç–∞–Ω–∏—è.`

	keyboard := b.getMainKeyboard()
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleGlucoseCommand(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåÖ –î–æ –µ–¥—ã", "glucose_before"),
			tgbotapi.NewInlineKeyboardButtonData("üçΩ –ü–æ—Å–ª–µ –µ–¥—ã", "glucose_after"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåÖ –£—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫", "glucose_morning"),
			tgbotapi.NewInlineKeyboardButtonData("üåô –ü–µ—Ä–µ–¥ —Å–Ω–æ–º", "glucose_night"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "ü©∏ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.6):")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleFoodCommand(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "food_breakfast"),
			tgbotapi.NewInlineKeyboardButtonData("üåû –û–±–µ–¥", "food_lunch"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåô –£–∂–∏–Ω", "food_dinner"),
			tgbotapi.NewInlineKeyboardButtonData("üçé –ü–µ—Ä–µ–∫—É—Å", "food_snack"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleStatsCommand(message *tgbotapi.Message, user *models.User) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ 1 –¥–µ–Ω—å", "stats_1"),
			tgbotapi.NewInlineKeyboardButtonData("üìÖ 7 –¥–Ω–µ–π", "stats_7"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ 30 –¥–Ω–µ–π", "stats_30"),
			tgbotapi.NewInlineKeyboardButtonData("üìÖ 90 –¥–Ω–µ–π", "stats_90"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleWebAppCommand(message *tgbotapi.Message, user *models.User) {
	if b.config.WebAppURL == "" {
		b.sendMessage(message.Chat.ID, "üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
		return
	}

	webAppURL := fmt.Sprintf("%s/webapp", b.config.WebAppURL)
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.InlineKeyboardButton{
				Text: "üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
				URL:  &webAppURL,
			},
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, `üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ DiabetBot

üîπ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –≥–ª—é–∫–æ–∑—ã –∏ –ø–∏—Ç–∞–Ω–∏—è  
üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üîπ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:`)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleGlucoseInput(message *tgbotapi.Message, user *models.User) {
	value, err := strconv.ParseFloat(message.Text, 64)
	if err != nil || value < 1.0 || value > 30.0 {
		b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã (1.0-30.0 –º–º–æ–ª—å/–ª)")
		return
	}

	record, err := b.glucoseService.CreateRecord(user.ID, value, "")
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
	recommendation := b.gigachatService.GetGlucoseRecommendation(user, record)
	
	response := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å–∞–ª: %.1f –º–º–æ–ª—å/–ª\n\nü§ñ %s", value, recommendation)
	b.sendMessage(message.Chat.ID, response)
}

func (b *Bot) handleTextMessage(message *tgbotapi.Message, user *models.User) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
	if len(message.Text) < 3 {
		b.sendMessage(message.Chat.ID, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —ç—Ç–æ –µ–¥–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
	if isFoodDescription(message.Text) {
		b.handleFoodDescription(message, user)
	} else {
		b.handleQuestion(message, user)
	}
}

func (b *Bot) handleFoodDescription(message *tgbotapi.Message, user *models.User) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –µ–¥–µ
	_, err := b.foodService.CreateRecord(user.ID, message.Text, "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", nil, nil, "", "")
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
	recommendation := b.gigachatService.GetFoodRecommendation(user, message.Text)
	
	response := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è: %s\n\nü§ñ %s", message.Text, recommendation)
	b.sendMessage(message.Chat.ID, response)
}

func (b *Bot) handleQuestion(message *tgbotapi.Message, user *models.User) {
	response := b.gigachatService.GetGeneralRecommendation(user, message.Text)
	b.sendMessage(message.Chat.ID, "ü§ñ "+response)
}

func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	b.api.Request(callback)

	data := callbackQuery.Data
	chatID := callbackQuery.Message.Chat.ID
	
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è callback query
	user, err := b.userService.GetByTelegramID(callbackQuery.From.ID)
	if err != nil {
		log.Printf("Error getting user for callback: %v", err)
		return
	}

	switch {
	case len(data) >= 4 && data[:4] == "food":
		b.handleFoodTypeSelection(chatID, data[5:])
	case len(data) >= 7 && data[:7] == "glucose":
		b.handleGlucosePeriodSelection(chatID, data[8:], user)
	case len(data) >= 5 && data[:5] == "stats":
		b.handleStatsSelection(chatID, data[6:], user)
	}
}

func (b *Bot) handleFoodTypeSelection(chatID int64, foodType string) {
	var typeText string
	switch foodType {
	case "breakfast":
		typeText = "–∑–∞–≤—Ç—Ä–∞–∫"
	case "lunch":
		typeText = "–æ–±–µ–¥"
	case "dinner":
		typeText = "—É–∂–∏–Ω"
	case "snack":
		typeText = "–ø–µ—Ä–µ–∫—É—Å"
	}

	text := fmt.Sprintf("üçΩ –û–ø–∏—à–∏—Ç–µ –≤–∞—à %s (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏, 200–≥)", typeText)
	b.sendMessage(chatID, text)
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func isNumeric(s string) bool {
	_, err := strconv.ParseFloat(s, 64)
	return err == nil
}

func isFoodDescription(text string) bool {
	foodKeywords := []string{"—Å—ä–µ–ª", "–ø–æ–µ–ª", "–µ–ª", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–ø–µ—Ä–µ–∫—É—Å", 
		"–∫–∞—à–∞", "—Ö–ª–µ–±", "–º—è—Å–æ", "—Ä—ã–±–∞", "–æ–≤–æ—â–∏", "—Ñ—Ä—É–∫—Ç—ã", "–º–æ–ª–æ–∫–æ", "–∫–æ—Ñ–µ", "—á–∞–π"}
	
	for _, keyword := range foodKeywords {
		if contains(text, keyword) {
			return true
		}
	}
	return false
}

func contains(text, substr string) bool {
	return len(text) >= len(substr) && 
		(text == substr || 
		 (len(text) > len(substr) && 
		  (text[:len(substr)] == substr || 
		   text[len(text)-len(substr):] == substr ||
		   containsMiddle(text, substr))))
}

func containsMiddle(text, substr string) bool {
	for i := 1; i <= len(text)-len(substr); i++ {
		if text[i:i+len(substr)] == substr {
			return true
		}
	}
	return false
}

// getMainKeyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (b *Bot) getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("ü©∏ –ó–∞–ø–∏—Å–∞—Ç—å –≥–ª—é–∫–æ–∑—É"),
			tgbotapi.NewKeyboardButton("üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
			tgbotapi.NewKeyboardButton("üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
		),
	)
}

// isKeyboardButton –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func (b *Bot) isKeyboardButton(text string) bool {
	buttons := []string{
		"ü©∏ –ó–∞–ø–∏—Å–∞—Ç—å –≥–ª—é–∫–æ–∑—É",
		"üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É", 
		"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
		"üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
		"‚ùì –ü–æ–º–æ—â—å",
		"üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
	}
	
	for _, button := range buttons {
		if text == button {
			return true
		}
	}
	return false
}

// handleKeyboardButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func (b *Bot) handleKeyboardButton(message *tgbotapi.Message, user *models.User) {
	switch message.Text {
	case "ü©∏ –ó–∞–ø–∏—Å–∞—Ç—å –≥–ª—é–∫–æ–∑—É":
		b.handleGlucoseCommand(message)
	case "üçΩ –ó–∞–ø–∏—Å–∞—Ç—å –µ–¥—É":
		b.handleFoodCommand(message)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		b.handleStatsCommand(message, user)
	case "üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
		b.handleWebAppCommand(message, user)
	case "‚ùì –ü–æ–º–æ—â—å":
		b.handleHelpCommand(message)
	case "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
		b.handleStartCommand(message, user)
	}
}

// handleGlucosePeriodSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≥–ª—é–∫–æ–∑—ã
func (b *Bot) handleGlucosePeriodSelection(chatID int64, period string, user *models.User) {
	var periodText string
	switch period {
	case "before":
		periodText = "–¥–æ –µ–¥—ã"
	case "after":
		periodText = "–ø–æ—Å–ª–µ –µ–¥—ã"
	case "morning":
		periodText = "—É—Ç—Ä–æ–º –Ω–∞—Ç–æ—â–∞–∫"
	case "night":
		periodText = "–ø–µ—Ä–µ–¥ —Å–Ω–æ–º"
	default:
		periodText = "–æ–±—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ"
	}

	text := fmt.Sprintf("ü©∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–ª—é–∫–æ–º–µ—Ç—Ä–∞ (%s)\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5.6", periodText)
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –∏–ª–∏ –∫—ç—à–µ
	b.sendMessage(chatID, text)
}

// handleStatsSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (b *Bot) handleStatsSelection(chatID int64, period string, user *models.User) {
	days, err := strconv.Atoi(period)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")
		return
	}

	stats, err := b.glucoseService.GetUserStats(user.ID, days)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		return
	}

	if stats.Count == 0 {
		text := fmt.Sprintf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %d –¥–Ω–µ–π:\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n\n–ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–ª—é–∫–æ–∑—ã!", days)
		b.sendMessage(chatID, text)
		return
	}

	var periodText string
	switch days {
	case 1:
		periodText = "—Å–µ–≥–æ–¥–Ω—è"
	case 7:
		periodText = "–∑–∞ –Ω–µ–¥–µ–ª—é"
	case 30:
		periodText = "–∑–∞ –º–µ—Å—è—Ü"
	case 90:
		periodText = "–∑–∞ 3 –º–µ—Å—è—Ü–∞"
	default:
		periodText = fmt.Sprintf("–∑–∞ %d –¥–Ω–µ–π", days)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —É—Ä–æ–≤–Ω—é
	var statusEmoji, statusText string
	if stats.Average <= 5.5 {
		statusEmoji = "‚úÖ"
		statusText = "–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å!"
	} else if stats.Average <= 7.0 {
		statusEmoji = "‚ö†Ô∏è"
		statusText = "–•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"
	} else {
		statusEmoji = "‚ùó"
		statusText = "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ"
	}

	text := fmt.Sprintf(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s:

üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: %.1f –º–º–æ–ª—å/–ª %s
üìâ –ú–∏–Ω–∏–º—É–º: %.1f –º–º–æ–ª—å/–ª  
üìä –ú–∞–∫—Å–∏–º—É–º: %.1f –º–º–æ–ª—å/–ª
üî¢ –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: %d

%s %s

üí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`, 
		periodText, stats.Average, statusEmoji, stats.Min, stats.Max, stats.Count,
		statusEmoji, statusText)

	b.sendMessage(chatID, text)
}