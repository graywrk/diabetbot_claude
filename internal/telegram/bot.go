package telegram

import (
	"fmt"
	"log"
	"strconv"

	"diabetbot/internal/config"
	"diabetbot/internal/models"
	"diabetbot/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
)

type Bot struct {
	api             *tgbotapi.BotAPI
	userService     *services.UserService
	glucoseService  *services.GlucoseService
	foodService     *services.FoodService
	gigachatService *services.GigaChatService
}

func NewBot(cfg *config.TelegramConfig, db *gorm.DB, gigachatService *services.GigaChatService) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	return &Bot{
		api:             bot,
		userService:     services.NewUserService(db),
		glucoseService:  services.NewGlucoseService(db),
		foodService:     services.NewFoodService(db),
		gigachatService: gigachatService,
	}, nil
}

func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			go b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	user, err := b.userService.GetOrCreateUser(message.From.ID, message.From.UserName, 
		message.From.FirstName, message.From.LastName, message.From.LanguageCode)
	if err != nil {
		log.Printf("Error getting/creating user: %v", err)
		return
	}

	switch {
	case message.IsCommand():
		b.handleCommand(message, user)
	case isNumeric(message.Text):
		b.handleGlucoseInput(message, user)
	default:
		b.handleTextMessage(message, user)
	}
}

func (b *Bot) handleCommand(message *tgbotapi.Message, user *models.User) {
	switch message.Command() {
	case "start":
		b.handleStartCommand(message, user)
	case "help":
		b.handleHelpCommand(message)
	case "glucose":
		b.handleGlucoseCommand(message)
	case "food":
		b.handleFoodCommand(message)
	case "stats":
		b.handleStatsCommand(message, user)
	case "webapp":
		b.handleWebAppCommand(message, user)
	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
	}
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message, user *models.User) {
	text := fmt.Sprintf(`–ü—Ä–∏–≤–µ—Ç, %s! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
ü©∏ /glucose - –∑–∞–ø–∏—Å–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞
üçΩ /food - –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏
üìä /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
üì± /webapp - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚ùì /help - –ø–æ–º–æ—â—å

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —á–∏—Å–ª–æ (—É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã) –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã.`, user.FirstName)

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleHelpCommand(message *tgbotapi.Message) {
	text := `üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

ü©∏ /glucose - –ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–ª—é–∫–æ–º–µ—Ç—Ä–∞
üçΩ /food - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
üì± /webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

üí° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.6) —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞
‚Ä¢ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –µ–ª–∏ –∏ —è –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–∏–∞–±–µ—Ç–µ - –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ /webapp`

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleGlucoseCommand(message *tgbotapi.Message) {
	text := "ü©∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–ª—é–∫–æ–º–µ—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.6)"
	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleFoodCommand(message *tgbotapi.Message) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåÖ –ó–∞–≤—Ç—Ä–∞–∫", "food_breakfast"),
			tgbotapi.NewInlineKeyboardButtonData("üåû –û–±–µ–¥", "food_lunch"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåô –£–∂–∏–Ω", "food_dinner"),
			tgbotapi.NewInlineKeyboardButtonData("üçé –ü–µ—Ä–µ–∫—É—Å", "food_snack"),
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "üçΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleStatsCommand(message *tgbotapi.Message, user *models.User) {
	stats, err := b.glucoseService.GetUserStats(user.ID, 7) // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		return
	}

	text := fmt.Sprintf(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:

üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: %.1f –º–º–æ–ª—å/–ª
üìâ –ú–∏–Ω–∏–º—É–º: %.1f –º–º–æ–ª—å/–ª  
üìä –ú–∞–∫—Å–∏–º—É–º: %.1f –º–º–æ–ª—å/–ª
üî¢ –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: %d

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webapp`, 
		stats.Average, stats.Min, stats.Max, stats.Count)

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleWebAppCommand(message *tgbotapi.Message, user *models.User) {
	webAppURL := fmt.Sprintf("https://yourdomain.com/webapp?user_id=%d", user.TelegramID)
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.InlineKeyboardButton{
				Text: "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
				URL:  &webAppURL,
			},
		),
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, "üì± –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

func (b *Bot) handleGlucoseInput(message *tgbotapi.Message, user *models.User) {
	value, err := strconv.ParseFloat(message.Text, 64)
	if err != nil || value < 1.0 || value > 30.0 {
		b.sendMessage(message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª—é–∫–æ–∑—ã (1.0-30.0 –º–º–æ–ª—å/–ª)")
		return
	}

	record, err := b.glucoseService.CreateRecord(user.ID, value, "")
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
	recommendation := b.gigachatService.GetGlucoseRecommendation(user, record)
	
	response := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å–∞–ª: %.1f –º–º–æ–ª—å/–ª\n\nü§ñ %s", value, recommendation)
	b.sendMessage(message.Chat.ID, response)
}

func (b *Bot) handleTextMessage(message *tgbotapi.Message, user *models.User) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞
	if len(message.Text) < 3 {
		b.sendMessage(message.Chat.ID, "–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —ç—Ç–æ –µ–¥–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
	if isFoodDescription(message.Text) {
		b.handleFoodDescription(message, user)
	} else {
		b.handleQuestion(message, user)
	}
}

func (b *Bot) handleFoodDescription(message *tgbotapi.Message, user *models.User) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –µ–¥–µ
	_, err := b.foodService.CreateRecord(user.ID, message.Text, "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", nil, nil, "", "")
	if err != nil {
		b.sendMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò
	recommendation := b.gigachatService.GetFoodRecommendation(user, message.Text)
	
	response := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è: %s\n\nü§ñ %s", message.Text, recommendation)
	b.sendMessage(message.Chat.ID, response)
}

func (b *Bot) handleQuestion(message *tgbotapi.Message, user *models.User) {
	response := b.gigachatService.GetGeneralRecommendation(user, message.Text)
	b.sendMessage(message.Chat.ID, "ü§ñ "+response)
}

func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	b.api.Request(callback)

	data := callbackQuery.Data
	chatID := callbackQuery.Message.Chat.ID

	switch {
	case data[:4] == "food":
		b.handleFoodTypeSelection(chatID, data[5:])
	}
}

func (b *Bot) handleFoodTypeSelection(chatID int64, foodType string) {
	var typeText string
	switch foodType {
	case "breakfast":
		typeText = "–∑–∞–≤—Ç—Ä–∞–∫"
	case "lunch":
		typeText = "–æ–±–µ–¥"
	case "dinner":
		typeText = "—É–∂–∏–Ω"
	case "snack":
		typeText = "–ø–µ—Ä–µ–∫—É—Å"
	}

	text := fmt.Sprintf("üçΩ –û–ø–∏—à–∏—Ç–µ –≤–∞—à %s (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏, 200–≥)", typeText)
	b.sendMessage(chatID, text)
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func isNumeric(s string) bool {
	_, err := strconv.ParseFloat(s, 64)
	return err == nil
}

func isFoodDescription(text string) bool {
	foodKeywords := []string{"—Å—ä–µ–ª", "–ø–æ–µ–ª", "–µ–ª", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–ø–µ—Ä–µ–∫—É—Å", 
		"–∫–∞—à–∞", "—Ö–ª–µ–±", "–º—è—Å–æ", "—Ä—ã–±–∞", "–æ–≤–æ—â–∏", "—Ñ—Ä—É–∫—Ç—ã", "–º–æ–ª–æ–∫–æ", "–∫–æ—Ñ–µ", "—á–∞–π"}
	
	for _, keyword := range foodKeywords {
		if contains(text, keyword) {
			return true
		}
	}
	return false
}

func contains(text, substr string) bool {
	return len(text) >= len(substr) && 
		(text == substr || 
		 (len(text) > len(substr) && 
		  (text[:len(substr)] == substr || 
		   text[len(text)-len(substr):] == substr ||
		   containsMiddle(text, substr))))
}

func containsMiddle(text, substr string) bool {
	for i := 1; i <= len(text)-len(substr); i++ {
		if text[i:i+len(substr)] == substr {
			return true
		}
	}
	return false
}