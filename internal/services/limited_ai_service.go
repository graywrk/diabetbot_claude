package services

import (
	"diabetbot/internal/models"
	"fmt"
	"gorm.io/gorm"
)

// LimitedAIService –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç AI —Å–µ—Ä–≤–∏—Å –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
type LimitedAIService struct {
	aiService      AIService
	aiUsageService *AIUsageService
}

func NewLimitedAIService(aiService AIService, db *gorm.DB) *LimitedAIService {
	return &LimitedAIService{
		aiService:      aiService,
		aiUsageService: NewAIUsageService(db),
	}
}

// isVIPUser –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤)
func (s *LimitedAIService) isVIPUser(user *models.User) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (case-insensitive)
	firstName := user.FirstName
	lastName := user.LastName
	
	// Sergio Dmitriev - VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
	if firstName == "Sergio" && lastName == "Dmitriev" {
		return true
	}
	if firstName == "Serjio" && lastName == "Dmitriev" {
		return true
	}
	
	return false
}

func (s *LimitedAIService) GetGlucoseRecommendation(user *models.User, record *models.GlucoseRecord) string {
	// VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
	if s.isVIPUser(user) {
		return s.aiService.GetGlucoseRecommendation(user, record)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	allowed, remaining, err := s.aiUsageService.CheckAndIncrementUsage(user.ID)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
	}
	
	if !allowed {
		return fmt.Sprintf("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤ (%d –≤ –¥–µ–Ω—å). –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.", DailyAIRequestLimit)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI
	recommendation := s.aiService.GetGlucoseRecommendation(user, record)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–∞—Ö
	if remaining > 0 {
		recommendation += fmt.Sprintf("\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å AI –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %d", remaining)
	} else {
		recommendation += fmt.Sprintf("\n\n‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π AI –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
	}
	
	return recommendation
}

func (s *LimitedAIService) GetFoodRecommendation(user *models.User, foodDescription string) string {
	// VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
	if s.isVIPUser(user) {
		return s.aiService.GetFoodRecommendation(user, foodDescription)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	allowed, remaining, err := s.aiUsageService.CheckAndIncrementUsage(user.ID)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≥–ª–µ–≤–æ–¥–∞–º–∏ –≤ —Ä–∞—Ü–∏–æ–Ω–µ."
	}
	
	if !allowed {
		return fmt.Sprintf("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤ (%d –≤ –¥–µ–Ω—å). –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ —Ä–∞—Ü–∏–æ–Ω–µ.", DailyAIRequestLimit)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI
	recommendation := s.aiService.GetFoodRecommendation(user, foodDescription)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–∞—Ö
	if remaining > 0 {
		recommendation += fmt.Sprintf("\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å AI –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %d", remaining)
	} else {
		recommendation += fmt.Sprintf("\n\n‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π AI –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
	}
	
	return recommendation
}

func (s *LimitedAIService) GetGeneralRecommendation(user *models.User, question string) string {
	// VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç–æ–≤
	if s.isVIPUser(user) {
		return s.aiService.GetGeneralRecommendation(user, question)
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	allowed, remaining, err := s.aiUsageService.CheckAndIncrementUsage(user.ID)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–µ—á–∞—â–µ–º—É –≤—Ä–∞—á—É –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π."
	}
	
	if !allowed {
		return fmt.Sprintf("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç AI –∑–∞–ø—Ä–æ—Å–æ–≤ (%d –≤ –¥–µ–Ω—å). –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ª–µ—á–∞—â–µ–º—É –≤—Ä–∞—á—É –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.", DailyAIRequestLimit)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç AI
	recommendation := s.aiService.GetGeneralRecommendation(user, question)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–∞—Ö
	if remaining > 0 {
		recommendation += fmt.Sprintf("\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å AI –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: %d", remaining)
	} else {
		recommendation += fmt.Sprintf("\n\n‚ö†Ô∏è –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π AI –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
	}
	
	return recommendation
}

// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ LimitedAIService —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AIService
var _ AIService = (*LimitedAIService)(nil)